/**************************
 *  * @Author: XiaoMao
 * @LastMod: 2024-08-16
 *
 * 


\X\i\a\o\M\a\o\A\p\p\l\e\U\p\d\a\t\e\V\e\r\i\f\i\c\a\t\i\o\n\



‰ªÖ‰æõÂ≠¶‰π†ÂèÇËÄÉÔºåËØ∑‰∫é‰∏ãËΩΩÂêé24Â∞èÊó∂ÂÜÖÂà†Èô§

********************************
# Â∞èÁâàÊú¨Êõ¥Êñ∞ËØ∑Êü•ÁúãÊõ¥Êñ∞Êó•Âøó ÔΩú ÊàñÂä†ÂÖ•xiaomaoÁªÑÁªá‚¨áÔ∏è
# ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ „ÄêÂ∞èÂ∏ΩÈõÜÂõ¢„Äë
# XiaoMao ¬∑ TGÈÄöÁü•È¢ëÈÅìÔºöhttps://t.me/xiaomaoJT
# XiaoMao ¬∑ TgËÑöÊú¨È¢ëÈÅìÔºöhttps://t.me/XiaoMaoScript
# XiaoMao ¬∑ GitHub‰ªìÂ∫ìÔºöhttps://github.com/xiaomaoJT/QxScript


‰ΩøÁî®ÊñπÊ≥ïÔºö
1„ÄÅ‰ΩøÁî®BoxJSÂ¢ûÂä†‰ª•‰∏ãËÑöÊú¨ËÆ¢ÈòÖ„ÄÇ
https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/boxJS/XiaoMao.json


2„ÄÅÈÄöËøáboxjsËÆæÁΩÆÈúÄË¶ÅËÆæÂ§áÂûãÂè∑
„ÄêüößÊú™Â°´ÂÜôÈªòËÆ§Ëé∑Âèñ„ÄåiPhone 15 Pro Max„ÄçÁâàÊú¨‰ø°ÊÅØ„Äë

 ËÆæÂ§áÂûãÂè∑Á§∫‰æãÔºö
„ÄåiPhone 15 Pro Max„Äç                üëâ [iPhone16,2]
„ÄåiPad Air 11-inch (M2)„Äç            üëâ [iPad14,8]
„ÄåMacBook Air (13-inch, M3, 2024)„Äç  üëâ [Mac15,12]
„ÄåApple Watch Series 5 (44mm, LTE)„Äç üëâ [Watch5,4]
„ÄåApple Vision Pro„Äç                 üëâ [RealityDevice14,1]
„ÄåApple TV 4K„Äç                      üëâ [AppleTV6,2]
„ÄåHomePod mini„Äç                     üëâ [AudioAccessory5,1]
„ÄåiPod touch 7„Äç                     üëâ [iPod9,1]



3„ÄÅ‚ö†Ô∏è QX > ËØ∑Ê±ÇÂàóË°®(‰∏âÊ®™Êù†ÊåâÈíÆ) > Âè≥‰∏äËßíÂä†Âè∑ > ÊñáÊú¨ÊñπÂºèÊ∑ªÂä†‰ª£Á†Å

0 0 2 * * ? https://raw.githubusercontent.com/xiaomaoJT/QxScript/main/rewrite/boxJS/XiaoMaoAppleUpdateVerification.js, tag=Ô£øXiaoMao_AppleÈ™åËØÅÈÄöÈÅì, img-url=https://raw.githubusercontent.com/tugepaopao/Image-Storage/master/cartoon/Cute/apple.png, enabled=true




********************************/

function Env(name) {
  // Âà§Êñ≠ÂΩìÂâçÁéØÂ¢ÉÊòØÂê¶‰∏∫ Loon
  const isLoon = typeof $loon !== "undefined";
  // Âà§Êñ≠ÂΩìÂâçÁéØÂ¢ÉÊòØÂê¶‰∏∫ Surge
  const isSurge = typeof $httpClient !== "undefined" && !isLoon;
  // Âà§Êñ≠ÂΩìÂâçÁéØÂ¢ÉÊòØÂê¶‰∏∫ QuantumultX
  const isQX = typeof $task !== "undefined";

  // ÂÆö‰πâ read ÊñπÊ≥ïÔºåÁî®‰∫éËØªÂèñÊï∞ÊçÆ
  const read = (key) => {
    if (isLoon || isSurge) return $persistentStore.read(key);
    if (isQX) return $prefs.valueForKey(key);
  };

  // ÂÆö‰πâ write ÊñπÊ≥ïÔºåÁî®‰∫éÂÜôÂÖ•Êï∞ÊçÆ
  const write = (key, value) => {
    if (isLoon || isSurge) return $persistentStore.write(key, value);
    if (isQX) return $prefs.setValueForKey(key, value);
  };

  // ÂÆö‰πâ notify ÊñπÊ≥ïÔºåÁî®‰∫éÂèëÈÄÅÈÄöÁü•
  const notify = (
    title = "XiaoMao",
    subtitle = "",
    message = "",
    url = "",
    url2 = url
  ) => {
    if (isLoon) $notification.post(title, subtitle, message, url);
    if (isSurge) $notification.post(title, subtitle, message, { url });
    if (isQX)
      $notify(title, subtitle, message, { "open-url": url, "media-url": url2 });
  };

  // ÂÆö‰πâ get ÊñπÊ≥ïÔºåÁî®‰∫éÂèëÈÄÅ GET ËØ∑Ê±Ç
  const get = (url, callback) => {
    if (isLoon || isSurge) $httpClient.get(url, callback);
    if (isQX) {
      url.method = `GET`;
      $task.fetch(url).then((resp) => callback(null, {}, resp.body));
    }
  };

  // ÂÆö‰πâ post ÊñπÊ≥ïÔºåÁî®‰∫éÂèëÈÄÅ POST ËØ∑Ê±Ç
  const post = (url, callback) => {
    if (isLoon || isSurge) $httpClient.post(url, callback);
    if (isQX) {
      url.method = `POST`;
      $task.fetch(url).then((resp) => callback(null, {}, resp.body));
    }
  };

  // ÂÆö‰πâ put ÊñπÊ≥ïÔºåÁî®‰∫éÂèëÈÄÅ PUT ËØ∑Ê±Ç
  const put = (url, callback) => {
    if (isLoon || isSurge) $httpClient.put(url, callback);
    if (isQX) {
      url.method = "PUT";
      $task.fetch(url).then((resp) => callback(null, {}, resp.body));
    }
  };

  // ÂÆö‰πâ toObj ÊñπÊ≥ïÔºåÁî®‰∫éÂ∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨‰∏∫ÂØπË±°
  const toObj = (str) => JSON.parse(str);

  // ÂÆö‰πâ toStr ÊñπÊ≥ïÔºåÁî®‰∫éÂ∞ÜÂØπË±°ËΩ¨‰∏∫Â≠óÁ¨¶‰∏≤
  const toStr = (obj) => JSON.stringify(obj);

  // ÂÆö‰πâ queryStr ÊñπÊ≥ïÔºåÁî®‰∫éÂ∞ÜÂØπË±°ËΩ¨‰∏∫ÂèØ‰ª•ËØ∑Ê±ÇÁöÑÂ≠óÁ¨¶‰∏≤
  const queryStr = (obj) => {
    return Object.keys(obj)
      .map((key) => `${key}=${obj[key]}`)
      .join("&");
  };

  // ÂÆö‰πâ log ÊñπÊ≥ïÔºåÁî®‰∫éËæìÂá∫Êó•Âøó
  const log = (message) => console.log(message);

  // ÂÆö‰πâ done ÊñπÊ≥ïÔºåÁî®‰∫éÁªìÊùü‰ªªÂä°
  const done = (value = {}) => $done(value);

  // ËøîÂõûÂåÖÂê´ÊâÄÊúâÊñπÊ≥ïÁöÑÂØπË±°
  return {
    name,
    read,
    write,
    notify,
    get,
    post,
    put,
    toObj,
    toStr,
    queryStr,
    log,
    done,
  };
}
const $ = new Env("XiaoMaoAppleUpdateVerification");

let DeviceInformation = "iPhone16,2";
$.read("DeviceInformation")
  ? (DeviceInformation = $.read("DeviceInformation"))
  : "";

function convertToChineseDate(dateStr) {
  // ÂéªÈô§Â∫èÊï∞ËØçÂêéÁºÄÔºà‰æãÂ¶Ç 'nd', 'rd', 'st', 'th'Ôºâ
  const cleanDateStr = dateStr.replace(/(\d+)(st|nd|rd|th)/, "$1");
  // Â∞ÜËã±ÊñáÊó•ÊúüÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ Date ÂØπË±°
  const dateObj = new Date(cleanDateStr);
  // Ëé∑ÂèñÊó•ÊúüÁöÑÂπ¥„ÄÅÊúà„ÄÅÊó•
  const year = dateObj.getFullYear();
  const month = String(dateObj.getMonth() + 1).padStart(2, "0"); // Êúà‰ªΩË°•Èõ∂
  const day = String(dateObj.getDate()).padStart(2, "0"); // Êó•ÊúüË°•Èõ∂
  // ÊûÑÂª∫‰∏≠ÊñáÊó•ÊúüÂ≠óÁ¨¶‰∏≤
  return `${year}/${month}/${day}`;
}
function getDateList(htmlString) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, "text/html");
  const rows = doc?.querySelectorAll("tr.firmware");
  const device = doc
    .querySelector("title")
    ?.textContent.replace("Choose an IPSW for the ", "")
    .replace("Choose an OTA for the ", "")
    .replace(" / IPSW Downloads", "");
  let deviceName = "";
  const tdSequence = rows[0]?.querySelectorAll("td").length == 5 ? 0 : 1;
  const firmwareData = Array.from(rows).map((row) => {
    deviceName == ""
      ? (deviceName = row
          .querySelector("td:nth-child(2)")
          .childNodes[0].textContent.trim()
          .match(/^\D+/)[0]
          .trim())
      : "";
    const status = row.querySelector("td:nth-child(1)").textContent.trim();
    const version = row
      .querySelector("td:nth-child(2)")
      .childNodes[0].textContent.trim()
      .replace(/^\D+/, "")
      .replace(/\s+/g, "");
    const date = convertToChineseDate(
      row
        .querySelector("td:nth-child(" + (3 + tdSequence) + ")")
        .textContent.trim()
    );
    const size = row
      .querySelector("td:nth-child(" + (4 + tdSequence) + ")")
      .textContent.trim();
    const filename = row
      .querySelector("td:nth-child(" + (5 + tdSequence) + ")")
      .textContent.trim();
    const downloadLink = row
      .getAttribute("onclick")
      .match(/window\.location\s*=\s*'(.*)'/)[1]
      .replace("download", "install");
    return { status, version, date, size, filename, downloadLink };
  });
  return { device, deviceName, firmwareData };
}
function padToChars(input, Length = 9) {
  const targetLength = Length;
  const paddingChar = " ";
  const currentLength = input.length;
  if (currentLength < targetLength) {
    const paddingLength = targetLength - currentLength;
    const paddedString = "" + paddingChar.repeat(paddingLength) + " ";
    return input + paddedString;
  }
  return input + " ";
}

// Ê†∏ÂøÉÂáΩÊï∞
let option = {
  url: encodeURI("https://ipsw.me/" + DeviceInformation),
  method: "GET",
};
$.get(option, (error1, resp1, response) => {
  if (response) {
    let versionList = getDateList(response);
    if (!versionList.device?.includes("404")) {
      if (versionList.firmwareData.length) {
        let returnText = `ËÆæÂ§áÂûãÂè∑„Äå${versionList.device}„Äç\nËÆæÂ§áÁ≥ªÁªü„Äå${
          versionList.deviceName
        }„Äç\nÊúâÊïàÁâàÊú¨„Äå${
          versionList.firmwareData.filter((e) => e.status == "‚úì").length
        }„Äç‰∏™\n\n\nüé≤È™åËØÅÈÄöÈÅìÁâàÊú¨ÂàóË°®\n\n${
          padToChars(versionList.deviceName, 18) +
          padToChars("Áä∂ÊÄÅ", 3) +
          padToChars("Â§ßÂ∞è", 8) +
          "Êó∂Èó¥"
        }\n`;
        let statusList = ["‚úÖ", "‚ùå"];
        let downloadLinkText = "\n\n" + "üß©ÂèØÁî®ÁâàÊú¨‰∏ãËΩΩÂú∞ÂùÄ" + "\n\n";
        versionList.firmwareData.map((el) => {
          let verificationStatus = el.status == "‚úì" ? true : false;
          returnText =
            returnText +
            `${
              padToChars(el.version, 18) +
              padToChars(
                verificationStatus ? statusList[0] : statusList[1],
                3
              ) +
              padToChars(el.size, 8) +
              el.date
            }\n`;

          if (verificationStatus) {
            downloadLinkText =
              downloadLinkText +
              `${versionList.deviceName + " " + el.version}\nÂ§ßÂ∞èÔºö${
                el.size
              }\nÊó∂Èó¥Ôºö${el.date}\n‰∏ãËΩΩÔºö${
                "https://ipsw.me" + el.downloadLink
              }\n\n`;
          }
        });
        $.notify(
          "Ô£øAppleÈ™åËØÅÈÄöÈÅì",
          `${versionList.deviceName}Á≥ªÁªüÈ™åËØÅÈÄöÈÅì`,
          returnText + downloadLinkText
        );
        $.log(returnText + downloadLinkText);
        $done({});
      } else {
        getError("ËÆæÂ§áÂûãÂè∑„Äé " + DeviceInformation + " „ÄèËé∑ÂèñÂÜÖÂÆπ‰∏∫Á©∫ÔºÅ");
      }
    } else {
      getError(
        "BoxJsËÆæÂ§áÂûãÂè∑„Äé " +
          DeviceInformation +
          " „ÄèËÆæÁΩÆÈîôËØØÔºåËØ∑Á°ÆËÆ§ÂûãÂè∑ÊòØÂê¶Ê≠£Á°ÆÔºÅ"
      );
    }
  } else {
    getError("ËØ∑Ê±ÇÂÜÖÂÆπÂ§±Ë¥•");
  }
});

function getError(err) {
  $.notify(
    "Ô£øXiaoMao_AppleÈ™åËØÅÈÄöÈÅì‚ùóÔ∏è",
    err,
    "üöß‰ø°ÊÅØÈîôËØØÔºåËØ∑Á®çÂêéÂÜçËØï‚ùóÔ∏è",
    "https://i.pixiv.re/img-original/img/2020/10/14/16/34/51/85008145_p0.jpg"
  );
  $done({});
}

setTimeout(() => {
  getError("ËØ∑Ê±ÇË∂ÖÊó∂ÔºåËØ∑Á®çÂêéÂÜçËØïÔΩû");
}, 10000);
